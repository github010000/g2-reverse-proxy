@Library('retort-lib') _
def label = "jenkins-${UUID.randomUUID().toString()}"

// Retort 모듈 설명
// https://myshare.skcc.com/display/SKCOP/Pipeline+-+Retort+Module+API

def DOCKER_IMAGE = 'g2-reverse-proxy'
def K8S_NAMESPACE = 'ymkim'
def VERSION = '1.1.0'

podTemplate(label:label,
    containers: [
      containerTemplate(name: 'go', image: 'golang', ttyEnabled: true, command: 'cat'),
      containerTemplate(name: 'docker', image: 'docker', ttyEnabled: true, command: 'cat', envVars: [
        envVar(key: 'DOCKER_HOST', value: 'tcp://jenkins-dind-service:2375 ')]),
      containerTemplate(name: 'kubectl', image: 'lachlanevenson/k8s-kubectl', ttyEnabled: true, command: 'cat')
    ],
    volumes: [
        configMapVolume(mountPath: '/var/config/zmon', configMapName: 'zmon-dev-kube-config')
    ]) {

    node(label) {
        stage('SOURCE CHECKOUT') {
            def repo = checkout scm
        }

        stage('Make GO BUILD'){
          container('go') {
            sh "GOOS=linux GOARCH=amd64  go build -v -o out/g2-reverse-proxy cmd/g2_reverse_proxy/g2_reverse_proxy.go"
          }
        }

        stage('BUILD DOCKER IMAGE') {
            container('docker') {
                withFolderProperties{
                    dockerCmd.build tag: "${env.DOCKER_REGISTRY}/${DOCKER_IMAGE}:${VERSION}", options: "--network=host"
                    dockerCmd.push registry: env.DOCKER_REGISTRY, imageName: DOCKER_IMAGE, imageVersion: VERSION, credentialsId:"ibmcloud_token"
                }
            }
        }

        stage('DEPLOY') {
            container('kubectl') {
                withEnv(['KUBECONFIG=/var/config/zmon/kube-config-zmon-dev.yml']) {
                    withFolderProperties {
                        sh 'cat docs/k8s/deploy-dev.yaml'

                        kubeCmd.apply file: 'docs/k8s/deploy-dev.yaml', namespace: K8S_NAMESPACE, wait: 600
                        kubeCmd.apply file: 'docs/k8s/service.yaml', namespace: K8S_NAMESPACE
                        kubeCmd.apply file: 'docs/k8s/ingress-dev.yaml', namespace: K8S_NAMESPACE
                    }
                }
            }
        }
    }
}